import 'dart:convert';
import 'dart:io';

import 'package:path/path.dart' as path;

void mergeLocalizations({
  List<String> inputDirectories = const ['/lib'],
  String outputDirectory = '/localizations',
  String outputFilename = 'language_en.arb',
  bool shouldAddContext = true,
}) {
  final String outputFilePath = path.join(outputDirectory, outputFilename);

  final outputFile = File(outputFilePath);

  final files = _findArbFiles(
    searchedDirectories: inputDirectories,
    omittedDirectory: outputDirectory,
  );
  final allContent = _concatenateAllArbFiles(files, shouldAddContext);

  outputFile.writeAsStringSync(allContent, mode: FileMode.write);

  _runFlutterGenL10n(outputDirectory);
}

String _concatenateAllArbFiles(List<File> files, bool shoudAddContext) {
  var content = <String, dynamic>{
    '@@__THIS_FILE_IS_AUTOGENERATED': 'Please do not modify',
  };
  for (final file in files) {
    final jsonStr = File(file.path).readAsStringSync();
    final Map<String, dynamic> json = jsonDecode(jsonStr);
    final values = shoudAddContext ? addContext(json, file.path) : json;
    content = {
      ...content,
      '@@@__${path.basenameWithoutExtension(file.path)}__': '',
      ...values,
    };
  }
  const encoder = JsonEncoder.withIndent('  ');
  return encoder.convert(content);
}

Map<String, dynamic> addContext(Map<String, dynamic> json, String filePath) {
  final Map<String, dynamic> values = {...json};

  json.forEach((key, value) {
    final context = 'context: ${path.basenameWithoutExtension(filePath)}';
    // add context to localizations
    if (!json.containsKey('@$key')) {
      values['@$key'] = {
        'description': context,
      };
    } else if (json.containsKey('@$key') &&
        json['@$key']['description'] == null) {
      values['@$key']['description'] = context;
    }
  });
  return values;
}

List<File> _findArbFiles({
  required List<String> searchedDirectories,
  required String omittedDirectory,
}) {
  final fileSystemEntities = <FileSystemEntity>[];
  for (final dir in searchedDirectories) {
    final files = Directory(dir).listSync(recursive: true);
    files.addAll(files);
  }
  return fileSystemEntities
      .where((entity) => entity.path.endsWith('.arb'))
      .map((entity) => File(entity.path))
      // this omition is naive but will do for now
      .where((file) => !file.path.contains(omittedDirectory))
      .toList();
}

void _runFlutterGenL10n(String dir) {
  final result = Process.runSync(
    'flutter',
    ['gen-l10n'],
    workingDirectory: dir,
    runInShell: true,
  );
  if (result.stderr != null) {
    // ignore: avoid_print
    print(result.stderr);
  }
}
